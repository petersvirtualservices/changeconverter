(function () {
  'use strict';

  /**
   * @license Copyright 2020 The Lighthouse Authors. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
   */

  // Not named `NBSP` because that creates a duplicate identifier (util.js).
  const NBSP2 = '\xa0';
  const KiB = 1024;
  const MiB = KiB * KiB;

  /**
   * @template T
   */
  class I18n {
    /**
     * @param {LH.Locale} locale
     * @param {T} strings
     */
    constructor(locale, strings) {
      // When testing, use a locale with more exciting numeric formatting.
      if (locale === 'en-XA') locale = 'de';

      this._numberDateLocale = locale;
      this._numberFormatter = new Intl.NumberFormat(locale);
      this._percentFormatter = new Intl.NumberFormat(locale, {style: 'percent'});
      this._strings = strings;
    }

    get strings() {
      return this._strings;
    }

    /**
     * Format number.
     * @param {number} number
     * @param {number=} granularity Number of decimal places to include. Defaults to 0.1.
     * @return {string}
     */
    formatNumber(number, granularity = 0.1) {
      const coarseValue = Math.round(number / granularity) * granularity;
      return this._numberFormatter.format(coarseValue);
    }

    /**
     * Format percent.
     * @param {number} number 0â€“1
     * @return {string}
     */
    formatPercent(number) {
      return this._percentFormatter.format(number);
    }

    /**
     * @param {number} size
     * @param {number=} granularity Controls how coarse the displayed value is, defaults to 0.1
     * @return {string}
     */
    formatBytesToKiB(size, granularity = 0.1) {
      const formatter = this._byteFormatterForGranularity(granularity);
      const kbs = formatter.format(Math.round(size / 1024 / granularity) * granularity);
      return `${kbs}${NBSP2}KiB`;
    }

    /**
     * @param {number} size
     * @param {number=} granularity Controls how coarse the displayed value is, defaults to 0.1
     * @return {string}
     */
    formatBytesToMiB(size, granularity = 0.1) {
      const formatter = this._byteFormatterForGranularity(granularity);
      const kbs = formatter.format(Math.round(size / (1024 ** 2) / granularity) * granularity);
      return `${kbs}${NBSP2}MiB`;
    }

    /**
     * @param {number} size
     * @param {number=} granularity Controls how coarse the displayed value is, defaults to 1
     * @return {string}
     */
    formatBytes(size, granularity = 1) {
      const formatter = this._byteFormatterForGranularity(granularity);
      const kbs = formatter.format(Math.round(size / granularity) * granularity);
      return `${kbs}${NBSP2}bytes`;
    }

    /**
     * @param {number} size
     * @param {number=} granularity Controls how coarse the displayed value is, defaults to 0.1
     * @return {string}
     */
    formatBytesWithBestUnit(size, granularity = 0.1) {
      if (size >= MiB) return this.formatBytesToMiB(size, granularity);
      if (size >= KiB) return this.formatBytesToKiB(size, granularity);
      return this.formatNumber(size, granularity) + '\xa0B';
    }

    /**
     * Format bytes with a constant number of fractional digits, i.e. for a granularity of 0.1, 10 becomes '10.0'
     * @param {number} granularity Controls how coarse the displayed value is
     * @return {Intl.NumberFormat}
     */
    _byteFormatterForGranularity(granularity) {
      // assume any granularity above 1 will not contain fractional parts, i.e. will never be 1.5
      let numberOfFractionDigits = 0;
      if (granularity < 1) {
        numberOfFractionDigits = -Math.floor(Math.log10(granularity));
      }

      return new Intl.NumberFormat(this._numberDateLocale, {
        ...this._numberFormatter.resolvedOptions(),
        maximumFractionDigits: numberOfFractionDigits,
        minimumFractionDigits: numberOfFractionDigits,
      });
    }

    /**
     * @param {number} ms
     * @param {number=} granularity Controls how coarse the displayed value is, defaults to 10
     * @return {string}
     */
    formatMilliseconds(ms, granularity = 10) {
      const coarseTime = Math.round(ms / granularity) * granularity;
      return coarseTime === 0
        ? `${this._numberFormatter.format(0)}${NBSP2}ms`
        : `${this._numberFormatter.format(coarseTime)}${NBSP2}ms`;
    }

    /**
     * @param {number} ms
     * @param {number=} granularity Controls how coarse the displayed value is, defaults to 0.1
     * @return {string}
     */
    formatSeconds(ms, granularity = 0.1) {
      const coarseTime = Math.round(ms / 1000 / granularity) * granularity;
      return `${this._numberFormatter.format(coarseTime)}${NBSP2}s`;
    }

    /**
     * Format time.
     * @param {string} date
     * @return {string}
     */
    formatDateTime(date) {
      /** @type {Intl.DateTimeFormatOptions} */
      const options = {
        month: 'short', day: 'numeric', year: 'numeric',
        hour: 'numeric', minute: 'numeric', timeZoneName: 'short',
      };

      // Force UTC if runtime timezone could not be detected.
      // See https://github.com/GoogleChrome/lighthouse/issues/1056
      // and https://github.com/GoogleChrome/lighthouse/pull/9822
      let formatter;
      try {
        formatter = new Intl.DateTimeFormat(this._numberDateLocale, options);
      } catch (err) {
        options.timeZone = 'UTC';
        formatter = new Intl.DateTimeFormat(this._numberDateLocale, options);
      }

      return formatter.format(new Date(date));
    }

    /**
     * Converts a time in milliseconds into a duration string, i.e. `1d 2h 13m 52s`
     * @param {number} timeInMilliseconds
     * @return {string}
     */
    formatDuration(timeInMilliseconds) {
      let timeInSeconds = timeInMilliseconds / 1000;
      if (Math.round(timeInSeconds) === 0) {
        return 'None';
      }

      /** @type {Array<string>} */
      const parts = [];
      /** @type {Record<string, number>} */
      const unitLabels = {
        d: 60 * 60 * 24,
        h: 60 * 60,
        m: 60,
        s: 1,
      };

      Object.keys(unitLabels).forEach(label => {
        const unit = unitLabels[label];
        const numberOfUnits = Math.floor(timeInSeconds / unit);
        if (numberOfUnits > 0) {
          timeInSeconds -= numberOfUnits * unit;
          parts.push(`${numberOfUnits}\xa0${label}`);
        }
      });

      return parts.join(' ');
    }
  }

  /**
   * @license
   * Copyright 2017 The Lighthouse Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Logs messages via a UI butter.
   */
  class Logger {
    /**
     * @param {Element} element
     */
    constructor(element) {
      this.el = element;
      this._id = undefined;
    }

    /**
     * Shows a butter bar.
     * @param {string} msg The message to show.
     * @param {boolean=} autoHide True to hide the message after a duration.
     *     Default is true.
     */
    log(msg, autoHide = true) {
      this._id && clearTimeout(this._id);

      this.el.textContent = msg;
      this.el.classList.add('show');
      if (autoHide) {
        this._id = setTimeout(_ => {
          this.el.classList.remove('show');
        }, 7000);
      }
    }

    /**
     * @param {string} msg
     */
    warn(msg) {
      this.log('Warning: ' + msg);
    }

    /**
     * @param {string} msg
     */
    error(msg) {
      this.log(msg);

      // Rethrow to make sure it's auditable as an error, but in a setTimeout so page
      // recovers gracefully and user can try loading a report again.
      setTimeout(_ => {
        throw new Error(msg);
      }, 0);
    }

    /**
     * Explicitly hides the butter bar.
     */
    hide() {
      this._id && clearTimeout(this._id);
      this.el.classList.remove('show');
    }
  }

  /**
   * @license Copyright 2021 The Lighthouse Authors. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
   */

  /* global btoa atob window CompressionStream Response */

  const btoa_ = typeof btoa !== 'undefined' ?
    btoa :
    /** @param {string} str */
    (str) => Buffer.from(str).toString('base64');
  const atob_ = typeof atob !== 'undefined' ?
    atob :
    /** @param {string} str */
    (str) => Buffer.from(str, 'base64').toString();

  /**
   * Takes an UTF-8 string and returns a base64 encoded string.
   * If gzip is true, the UTF-8 bytes are gzipped before base64'd, using
   * CompressionStream (currently only in Chrome), falling back to pako
   * (which is only used to encode in our Node tests).
   * @param {string} string
   * @param {{gzip: boolean}} options
   * @return {Promise<string>}
   */
  async function toBase64(string, options) {
    let bytes = new TextEncoder().encode(string);

    if (options.gzip) {
      if (typeof CompressionStream !== 'undefined') {
        const cs = new CompressionStream('gzip');
        const writer = cs.writable.getWriter();
        writer.write(bytes);
        writer.close();
        const compAb = await new Response(cs.readable).arrayBuffer();
        bytes = new Uint8Array(compAb);
      } else {
        /** @type {import('pako')=} */
        const pako = window.pako;
        bytes = pako.gzip(string);
      }
    }

    let binaryString = '';
    // This is ~25% faster than building the string one character at a time.
    // https://jsbench.me/2gkoxazvjl
    const chunkSize = 5000;
    for (let i = 0; i < bytes.length; i += chunkSize) {
      binaryString += String.fromCharCode(...bytes.subarray(i, i + chunkSize));
    }
    return btoa_(binaryString);
  }

  /**
   * @param {string} encoded
   * @param {{gzip: boolean}} options
   * @return {string}
   */
  function fromBase64(encoded, options) {
    const binaryString = atob_(encoded);
    const bytes = Uint8Array.from(binaryString, c => c.charCodeAt(0));

    if (options.gzip) {
      /** @type {import('pako')=} */
      const pako = window.pako;
      return pako.ungzip(bytes, {to: 'string'});
    } else {
      return new TextDecoder().decode(bytes);
    }
  }

  const TextEncoding = {toBase64, fromBase64};

  /**
   * @license Copyright 2021 The Lighthouse Authors. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
   */

  // @ts-expect-error
  window.I18n = I18n;
  // @ts-expect-error
  window.Logger = Logger;
  // @ts-expect-error
  window.TextEncoding = TextEncoding;

}());
